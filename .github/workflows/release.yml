name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact-name: Anava-Installer-Mac
            build-output: release/*.dmg
          - os: windows-latest
            platform: win
            artifact-name: Anava-Installer-Windows
            build-output: release/*.exe

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Update npm to latest version first
        npm install -g npm@latest
        
        # Clear npm cache to avoid stale issues
        npm cache clean --force
        
        # Run the clean install first
        npm ci
        
        # NOW patch the installation by adding the missing native module
        # This happens AFTER npm ci, so it won't be deleted
        # Force the installation even if it's an optional dependency
        npm install @rollup/rollup-win32-x64-msvc --force --no-save
        
        # Verify the module was installed
        if (!(Test-Path "node_modules/@rollup/rollup-win32-x64-msvc")) {
          Write-Error "Failed to install @rollup/rollup-win32-x64-msvc"
          exit 1
        }
      shell: pwsh
      
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: npm ci

    - name: Import Code Signing Certificate (macOS)
      if: matrix.os == 'macos-latest'
      env:
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      run: |
        # Create a temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Create the keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Import certificate
        echo "$CSC_LINK" | base64 --decode > certificate.p12
        security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$CSC_KEY_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
        rm certificate.p12
        
        # Set the keychain as default
        security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain
        security default-keychain -s "$KEYCHAIN_PATH"
        
        # Allow codesign to access the certificate without password prompt
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    - name: Validate signing configuration (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Validating macOS signing configuration..."
        node scripts/validate-signing-config.js
        
        # Check that secrets are available
        if [ -z "${{ secrets.APPLE_ID }}" ]; then
          echo "::error::APPLE_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_ID_PASSWORD }}" ]; then
          echo "::error::APPLE_ID_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_TEAM_ID }}" ]; then
          echo "::error::APPLE_TEAM_ID secret is not set"
          exit 1
        fi
        echo "âœ… All required secrets are configured"

    - name: Clean build directories (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "=== CLEANING BUILD DIRECTORIES ==="
        if (Test-Path dist) { Remove-Item -Recurse -Force dist }
        if (Test-Path release) { Remove-Item -Recurse -Force release }
        if (Test-Path "node_modules/.cache") { Remove-Item -Recurse -Force "node_modules/.cache" }
        Write-Host "Cleaned dist, release, and cache directories"
        
    - name: Clean build directories (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "=== CLEANING BUILD DIRECTORIES ==="
        rm -rf dist/
        rm -rf release/
        rm -rf node_modules/.cache/
        echo "Cleaned dist, release, and cache directories"
        
    - name: Check versions before build (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Write-Host "=== CHECKING VERSIONS ==="
        Write-Host "package.json version:"
        Get-Content package.json | Select-String '"version"' | Select-Object -First 1
        Write-Host "package-lock.json version:"
        Get-Content package-lock.json | Select-String '"version"' | Select-Object -First 2
        Write-Host "Git HEAD:"
        git rev-parse HEAD
        Write-Host "Git status:"
        git status
        Write-Host "========================="
        
    - name: Check versions before build (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "=== CHECKING VERSIONS ==="
        echo "package.json version:"
        grep '"version"' package.json | head -1
        echo "package-lock.json version:"
        grep '"version"' package-lock.json | head -2
        echo "Git HEAD:"
        git rev-parse HEAD
        echo "Git status:"
        git status
        echo "========================="
    
    - name: Build Electron app
      run: npm run dist:${{ matrix.platform }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: List build outputs
      run: ls -la release/
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.build-output }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Mac artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Installer-Mac
        path: release-mac

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Installer-Windows
        path: release-win

    - name: List downloaded artifacts
      run: |
        echo "Mac artifacts:"
        ls -la release-mac/
        echo "Windows artifacts:"
        ls -la release-win/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        name: Release ${{ github.ref_name }}
        body: |
          ## Anava Installer ${{ github.ref_name }}
          
          ### Installation
          
          **macOS**: Download the .dmg file and double-click to install
          **Windows**: Download the .exe installer and run it
          
          ### Changes
          Please see the commit history for changes in this release.
        files: |
          release-mac/*.dmg
          release-win/*.exe

  update-vision-releases:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout vision-releases repository
      uses: actions/checkout@v4
      with:
        repository: AnavaAcap/vision-releases
        token: ${{ secrets.VISION_RELEASES_TOKEN }}
        path: vision-releases

    - name: Download Mac artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Installer-Mac
        path: release-mac

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Installer-Windows
        path: release-win

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Copy assets with static names
      run: |
        echo "Copying assets to vision-releases with static names..."
        
        # Find the actual file names
        MAC_FILE=$(find release-mac -name "*.dmg" | head -1)
        WIN_FILE=$(find release-win -name "*.exe" | head -1)
        
        if [ -z "$MAC_FILE" ]; then
          echo "Error: No .dmg file found"
          exit 1
        fi
        
        if [ -z "$WIN_FILE" ]; then
          echo "Error: No .exe file found"
          exit 1
        fi
        
        echo "Found Mac file: $MAC_FILE"
        echo "Found Windows file: $WIN_FILE"
        
        # Copy with static names for website integration
        cp "$MAC_FILE" vision-releases/Anava.Vision.dmg
        cp "$WIN_FILE" vision-releases/Anava.Vision.Setup.exe
        
        # Also keep versioned copies for reference
        cp "$MAC_FILE" "vision-releases/Anava.Vision.${{ steps.get_version.outputs.version }}.dmg"
        cp "$WIN_FILE" "vision-releases/Anava.Vision.Setup.${{ steps.get_version.outputs.version }}.exe"
        
        echo "Files copied successfully"
        ls -la vision-releases/

    - name: Generate README
      run: |
        cat > vision-releases/README.md << 'EOF'
        # Anava Vision - Public Downloads
        
        This repository provides static download links for the Anava Vision application.
        
        ## Download Links (Always Latest Version)
        
        ### Windows
        **Direct Download**: [Anava.Vision.Setup.exe](https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.Setup.exe)
        
        **Website Integration URL**: 
        ```
        https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.Setup.exe
        ```
        
        ### macOS
        **Direct Download**: [Anava.Vision.dmg](https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.dmg)
        
        **Website Integration URL**:
        ```
        https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.dmg
        ```
        
        ## Current Version
        
        **Version**: ${{ steps.get_version.outputs.version }}  
        **Release Date**: $(date +"%Y-%m-%d")  
        **Source**: [anava-infrastructure-deployer](https://github.com/AnavaAcap/anava-infrastructure-deployer/releases/tag/${{ steps.get_version.outputs.version }})
        
        ## What is Anava Vision?
        
        Anava Vision is an intelligent camera configuration and deployment system that:
        
        - **Automated Camera Discovery**: Automatically finds and configures Axis cameras on your network
        - **AI-Powered Analytics**: Deploy advanced computer vision and AI analytics to your cameras
        - **Cloud Integration**: Seamless integration with Google Cloud Platform for scalable AI processing
        - **Vision Architect**: AI-driven system that creates custom analytics scenarios based on your specific needs
        - **Enterprise Ready**: Complete deployment solution for retail, manufacturing, healthcare, and security applications
        
        ## Installation
        
        ### Windows
        1. Download `Anava.Vision.Setup.exe`
        2. Run the installer
        3. Follow the setup wizard
        
        ### macOS
        1. Download `Anava.Vision.dmg`
        2. Open the DMG file
        3. Drag Anava Vision to your Applications folder
        
        ## System Requirements
        
        ### Windows
        - Windows 10 or later (64-bit)
        - 4GB RAM minimum, 8GB recommended
        - 500MB free disk space
        - Network access to camera subnet
        
        ### macOS
        - macOS 10.15 (Catalina) or later
        - Intel or Apple Silicon Mac
        - 4GB RAM minimum, 8GB recommended
        - 500MB free disk space
        - Network access to camera subnet
        
        ## Support
        
        - **Documentation**: [Anava Vision Docs](https://docs.anava.ai)
        - **Issues**: [Report Issues](https://github.com/AnavaAcap/anava-infrastructure-deployer/issues)
        - **Enterprise Support**: contact@anava.ai
        
        ## Release History
        
        For complete release history and changelog, see the [main repository releases](https://github.com/AnavaAcap/anava-infrastructure-deployer/releases).
        
        ---
        
        *This repository is automatically updated when new versions are released.*
        EOF

    - name: Create GitHub Release in vision-releases
      run: |
        cd vision-releases
        
        # Check if this version already exists
        if git tag | grep -q "${{ steps.get_version.outputs.version }}"; then
          echo "Tag ${{ steps.get_version.outputs.version }} already exists, deleting it..."
          git tag -d "${{ steps.get_version.outputs.version }}" || true
          git push origin --delete "${{ steps.get_version.outputs.version }}" || true
        fi
        
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Add all files
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Commit changes
          git commit -m "Release ${{ steps.get_version.outputs.version }} - Auto-deployed from main repository"
          
          # Push changes
          git push origin main
        fi
        
        # Create and push tag
        git tag "${{ steps.get_version.outputs.version }}"
        git push origin "${{ steps.get_version.outputs.version }}"

    - name: Create Release in vision-releases repo
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.VISION_RELEASES_TOKEN }}
        repository: AnavaAcap/vision-releases
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Anava Vision ${{ steps.get_version.outputs.version }}
        body: |
          # Anava Vision ${{ steps.get_version.outputs.version }}
          
          Automatically deployed from [anava-infrastructure-deployer](https://github.com/AnavaAcap/anava-infrastructure-deployer/releases/tag/${{ steps.get_version.outputs.version }})
          
          ## Download Options
          
          ### Windows (x64)
          - **[Anava.Vision.Setup.exe](https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.Setup.exe)** *(Always latest)*
          - [Anava.Vision.Setup.${{ steps.get_version.outputs.version }}.exe](https://github.com/AnavaAcap/vision-releases/releases/download/${{ steps.get_version.outputs.version }}/Anava.Vision.Setup.${{ steps.get_version.outputs.version }}.exe) *(This version)*
          
          ### macOS (Universal)
          - **[Anava.Vision.dmg](https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.dmg)** *(Always latest)*
          - [Anava.Vision.${{ steps.get_version.outputs.version }}.dmg](https://github.com/AnavaAcap/vision-releases/releases/download/${{ steps.get_version.outputs.version }}/Anava.Vision.${{ steps.get_version.outputs.version }}.dmg) *(This version)*
          
          ## Static URLs for Website Integration
          
          These URLs always point to the latest version:
          - Windows: `https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.Setup.exe`
          - macOS: `https://github.com/AnavaAcap/vision-releases/releases/latest/download/Anava.Vision.dmg`
          
          Released: $(date +"%Y-%m-%d %H:%M UTC")
        files: |
          Anava.Vision.dmg
          Anava.Vision.Setup.exe
          Anava.Vision.${{ steps.get_version.outputs.version }}.dmg
          Anava.Vision.Setup.${{ steps.get_version.outputs.version }}.exe