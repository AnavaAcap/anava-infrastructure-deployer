name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
            artifact-name: Anava-Vision-Mac
            build-output: release/*.dmg
          - os: windows-latest
            platform: win
            artifact-name: Anava-Vision-Windows
            build-output: release/*.exe

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Update npm to latest version first
        npm install -g npm@latest
        
        # Clear npm cache to avoid stale issues
        npm cache clean --force
        
        # Run the clean install first
        npm ci
        
        # NOW patch the installation by adding the missing native module
        # This happens AFTER npm ci, so it won't be deleted
        npm install @rollup/rollup-win32-x64-msvc --no-save
        
        # Also ensure other Windows-specific build tools are available
        npm install node-gyp --no-save
      shell: pwsh
      
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: npm ci

    - name: Import Code Signing Certificate (macOS)
      if: matrix.os == 'macos-latest' && env.CSC_LINK != ''
      env:
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      run: |
        # Create a temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Create the keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        
        # Import certificate
        echo "$CSC_LINK" | base64 --decode > certificate.p12
        security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$CSC_KEY_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
        rm certificate.p12
        
        # Set the keychain as default
        security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain
        security default-keychain -s "$KEYCHAIN_PATH"
        
        # Allow codesign to access the certificate without password prompt
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

    - name: Validate signing configuration (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Validating macOS signing configuration..."
        node scripts/validate-signing-config.js
        
        # Check that secrets are available
        if [ -z "${{ secrets.APPLE_ID }}" ]; then
          echo "::error::APPLE_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_ID_PASSWORD }}" ]; then
          echo "::error::APPLE_ID_PASSWORD secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.APPLE_TEAM_ID }}" ]; then
          echo "::error::APPLE_TEAM_ID secret is not set"
          exit 1
        fi
        echo "âœ… All required secrets are configured"

    - name: Build Electron app
      run: npm run dist:${{ matrix.platform }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    - name: List build outputs
      run: ls -la release/
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.build-output }}
        if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Mac artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Vision-Mac
        path: release-mac

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: Anava-Vision-Windows
        path: release-win

    - name: List downloaded artifacts
      run: |
        echo "Mac artifacts:"
        ls -la release-mac/
        echo "Windows artifacts:"
        ls -la release-win/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        name: Release ${{ github.ref_name }}
        body: |
          ## Anava Vision ${{ github.ref_name }}
          
          ### Installation
          
          **macOS**: Download the .dmg file and double-click to install
          **Windows**: Download the .exe installer and run it
          
          ### Changes
          Please see the commit history for changes in this release.
        files: |
          release-mac/*.dmg
          release-win/*.exe