import { google } from 'googleapis';
import { OAuth2Client } from 'google-auth-library';

export interface FirebaseConfig {
  apiKey: string;
  authDomain: string;
  projectId: string;
  storageBucket: string;
  messagingSenderId: string;
  appId: string;
  measurementId?: string;
}

export class FirebaseAppDeployer {
  private firebasemanagement = google.firebase('v1beta1');
  
  constructor(private auth: OAuth2Client) {}

  async createFirebaseWebApp(
    projectId: string,
    appName: string,
    displayName: string
  ): Promise<FirebaseConfig> {
    console.log('=== Starting Firebase Web App creation ===');
    console.log(`Project: ${projectId}, App Name: ${appName}`);
    
    try {
      // First, check if Firebase project exists
      const firebaseProject = await this.getOrCreateFirebaseProject(projectId);
      console.log(`Firebase project: ${firebaseProject}`);
      
      // List existing web apps
      const existingApps = await this.listWebApps(projectId);
      console.log(`Found ${existingApps.length} existing web apps`);
      
      // Check if app already exists by display name
      const existingApp = existingApps.find(app => 
        app.displayName === displayName
      );
      
      if (existingApp) {
        console.log(`Web app "${displayName}" already exists`);
        return await this.getWebAppConfig(existingApp.name!);
      }
      
      // Create new web app
      console.log(`Creating new web app "${displayName}"...`);
      const webApp = await this.createWebApp(projectId, displayName);
      console.log(`Web app created: ${webApp.appId}`);
      
      // Wait a bit for Firebase to fully configure the app
      console.log('Waiting for Firebase to configure the web app...');
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Get the config
      const config = await this.getWebAppConfig(webApp.name!);
      console.log('Firebase config retrieved successfully');
      
      return config;
    } catch (error: any) {
      console.error('Failed to create Firebase web app:', error);
      if (error.response?.data?.error) {
        console.error('Error details:', JSON.stringify(error.response.data.error, null, 2));
      }
      throw error;
    }
  }
  
  private async getOrCreateFirebaseProject(projectId: string): Promise<string> {
    try {
      // Check if Firebase is already enabled
      const { data: project } = await this.firebasemanagement.projects.get({
        name: `projects/${projectId}`,
        auth: this.auth
      });
      
      if (project.resources) {
        console.log('Firebase already enabled for project');
        return project.name!;
      }
    } catch (error: any) {
      if (error.code === 404) {
        // Firebase not enabled, need to enable it
        console.log('Firebase not enabled, adding Firebase to project...');
        
        const { data: operation } = await this.firebasemanagement.projects.addFirebase({
          project: `projects/${projectId}`,
          auth: this.auth
        });
        
        if (operation.name) {
          console.log('Waiting for Firebase to be added to project...');
          await this.waitForOperation(operation.name);
        }
        
        return `projects/${projectId}`;
      }
      throw error;
    }
    
    return `projects/${projectId}`;
  }
  
  private async listWebApps(projectId: string): Promise<any[]> {
    try {
      const { data } = await this.firebasemanagement.projects.webApps.list({
        parent: `projects/${projectId}`,
        auth: this.auth
      });
      
      return data.apps || [];
    } catch (error: any) {
      console.warn('Failed to list web apps:', error.message);
      return [];
    }
  }
  
  private async createWebApp(
    projectId: string,
    displayName: string
  ): Promise<any> {
    const { data: operation } = await this.firebasemanagement.projects.webApps.create({
      parent: `projects/${projectId}`,
      auth: this.auth,
      requestBody: {
        displayName: displayName
        // appId is auto-generated by Firebase, we cannot set it
      }
    });
    
    if (!operation.name) {
      throw new Error('Failed to create web app - no operation returned');
    }
    
    console.log('Waiting for web app creation to complete...');
    const result = await this.waitForOperation(operation.name);
    
    // Extract the web app from the operation result
    if (result.response && result.response.name) {
      const { data: webApp } = await this.firebasemanagement.projects.webApps.get({
        name: result.response.name,
        auth: this.auth
      });
      
      return webApp;
    }
    
    throw new Error('Failed to get created web app details');
  }
  
  private async getWebAppConfig(webAppName: string): Promise<FirebaseConfig> {
    console.log(`Getting config for web app: ${webAppName}`);
    
    try {
      // First get the web app details to ensure it's fully created
      const { data: webApp } = await this.firebasemanagement.projects.webApps.get({
        name: webAppName,
        auth: this.auth
      });
      
      console.log('Web app details:', JSON.stringify(webApp, null, 2));
      
      // Now get the config
      const { data: response } = await this.firebasemanagement.projects.webApps.getConfig({
        name: webAppName,
        auth: this.auth
      });
      
      console.log('Raw Firebase config response:', JSON.stringify(response, null, 2));
      
      // The config data is returned directly from the API
      let configData: any = response;
      
      // Check if we have the config data in the expected format
      console.log('Config data type:', typeof configData);
      console.log('Config data keys:', configData ? Object.keys(configData) : 'null');
      
      // Extract project ID from web app name (format: projects/{projectId}/webApps/{appId})
      const parts = webAppName.split('/');
      const projectId = parts[1];
      const appIdFull = webApp.appId || parts[3];
      
      // The API key might need to be fetched from the project's API keys
      let apiKey = configData.apiKey || '';
      
      if (!apiKey && projectId) {
        // Try to get the API key from the Firebase project settings
        console.log('API key not in config, attempting to retrieve from project settings...');
        
        // Get the project number which is often the messagingSenderId
        const messagingSenderId = webApp.projectId ? 
          (await this.getProjectNumber(projectId)) : '';
        
        // Firebase web apps typically get an auto-generated Browser API key
        // We'll need to construct the config manually if the API doesn't return it
        const authDomain = configData.authDomain || `${projectId}.firebaseapp.com`;
        const storageBucket = configData.storageBucket || `${projectId}.firebasestorage.app`;
        
        const finalConfig = {
          apiKey: apiKey || await this.getProjectApiKey(projectId),
          authDomain: authDomain,
          projectId: configData.projectId || projectId || '',
          storageBucket: storageBucket,
          messagingSenderId: configData.messagingSenderId || messagingSenderId || '',
          appId: configData.appId || appIdFull || '',
          measurementId: configData.measurementId || undefined
        };
        
        console.log('Final Firebase config:', JSON.stringify(finalConfig, null, 2));
        
        return finalConfig;
      }
      
      // Use the config as-is if we have an API key
      const finalConfig = {
        apiKey: apiKey,
        authDomain: configData.authDomain || `${projectId}.firebaseapp.com`,
        projectId: configData.projectId || projectId || '',
        storageBucket: configData.storageBucket || `${projectId}.firebasestorage.app`,
        messagingSenderId: configData.messagingSenderId || '',
        appId: configData.appId || appIdFull || '',
        measurementId: configData.measurementId || undefined
      };
      
      console.log('Final Firebase config:', JSON.stringify(finalConfig, null, 2));
      
      return finalConfig;
    } catch (error: any) {
      console.error('Failed to get web app config:', error);
      throw error;
    }
  }
  
  private async getProjectNumber(projectId: string): Promise<string> {
    try {
      const cloudresourcemanager = google.cloudresourcemanager('v1');
      const { data: project } = await cloudresourcemanager.projects.get({
        projectId: projectId,
        auth: this.auth
      });
      
      return project.projectNumber || '';
    } catch (error) {
      console.error('Failed to get project number:', error);
      return '';
    }
  }
  
  private async getProjectApiKey(projectId: string): Promise<string> {
    try {
      // Firebase automatically creates API keys for web apps
      // We need to list the API keys and find the one for Firebase
      const apikeys = google.apikeys('v2');
      
      const { data } = await apikeys.projects.locations.keys.list({
        parent: `projects/${projectId}/locations/global`,
        auth: this.auth
      });
      
      console.log('Available API keys:', JSON.stringify(data.keys?.map(k => ({
        name: k.name,
        displayName: k.displayName,
        restrictions: k.restrictions
      })), null, 2));
      
      // Look for a Firebase or Browser key
      const firebaseKey = data.keys?.find(key => 
        key.displayName?.toLowerCase().includes('firebase') ||
        key.displayName?.toLowerCase().includes('browser') ||
        key.displayName?.toLowerCase().includes('web') ||
        key.restrictions?.browserKeyRestrictions !== undefined
      );
      
      if (firebaseKey && firebaseKey.name) {
        // Get the full key details including the keyString
        const { data: keyDetails } = await apikeys.projects.locations.keys.get({
          name: firebaseKey.name,
          auth: this.auth
        });
        
        console.log('Firebase API key details:', JSON.stringify({
          name: keyDetails.name,
          displayName: keyDetails.displayName,
          keyString: keyDetails.keyString ? 'REDACTED' : 'MISSING'
        }, null, 2));
        
        return keyDetails.keyString || '';
      }
      
      // If no Firebase-specific key found, look for any browser key
      const anyBrowserKey = data.keys?.find(key => 
        key.restrictions?.browserKeyRestrictions !== undefined
      );
      
      if (anyBrowserKey && anyBrowserKey.name) {
        const { data: keyDetails } = await apikeys.projects.locations.keys.get({
          name: anyBrowserKey.name,
          auth: this.auth
        });
        
        return keyDetails.keyString || '';
      }
      
      console.warn('No suitable API key found for Firebase web app');
      
      // Try to create a new API key for Firebase
      console.log('Creating new API key for Firebase web app...');
      return await this.createFirebaseApiKey(projectId);
    } catch (error: any) {
      console.error('Failed to get project API key:', error);
      if (error.code === 403) {
        console.warn('API Keys API might not be enabled. The web app will work but without an API key.');
      }
      return '';
    }
  }
  
  private async createFirebaseApiKey(projectId: string): Promise<string> {
    try {
      const apikeys = google.apikeys('v2');
      
      // Create a new API key for Firebase
      const { data: operation } = await apikeys.projects.locations.keys.create({
        parent: `projects/${projectId}/locations/global`,
        keyId: `firebase-web-api-key-${Date.now()}`,
        auth: this.auth,
        requestBody: {
          displayName: 'Firebase Web API Key',
          restrictions: {
            browserKeyRestrictions: {
              allowedReferrers: ['*'] // You might want to restrict this in production
            }
          }
        }
      });
      
      if (!operation.name) {
        throw new Error('Failed to create API key - no operation returned');
      }
      
      // Wait for the operation to complete
      console.log('Waiting for API key creation to complete...');
      const result = await this.waitForApiKeyOperation(operation.name);
      
      if (result.response && result.response.keyString) {
        console.log('Successfully created Firebase API key');
        return result.response.keyString;
      }
      
      throw new Error('Failed to get API key from operation result');
    } catch (error: any) {
      console.error('Failed to create Firebase API key:', error);
      return '';
    }
  }
  
  private async waitForApiKeyOperation(operationName: string): Promise<any> {
    const apikeys = google.apikeys('v2');
    let done = false;
    let retries = 0;
    const maxRetries = 30;
    
    while (!done && retries < maxRetries) {
      const { data: operation } = await apikeys.operations.get({
        name: operationName,
        auth: this.auth
      });
      
      if (operation.done) {
        done = true;
        if (operation.error) {
          throw new Error(`Operation failed: ${JSON.stringify(operation.error)}`);
        }
        return operation;
      } else {
        await new Promise(resolve => setTimeout(resolve, 2000));
        retries++;
      }
    }
    
    if (!done) {
      throw new Error('API key creation operation timed out');
    }
  }
  
  private async waitForOperation(operationName: string): Promise<any> {
    let done = false;
    let retries = 0;
    const maxRetries = 60;
    
    while (!done && retries < maxRetries) {
      const { data: operation } = await this.firebasemanagement.operations.get({
        name: operationName,
        auth: this.auth
      });
      
      if (operation.done) {
        done = true;
        if (operation.error) {
          throw new Error(`Operation failed: ${JSON.stringify(operation.error)}`);
        }
        return operation;
      } else {
        if (retries % 3 === 0) { // Log every 15 seconds
          console.log(`Still waiting for Firebase operation... (${retries * 5}s elapsed)`);
        }
        await new Promise(resolve => setTimeout(resolve, 5000));
        retries++;
      }
    }
    
    if (!done) {
      throw new Error('Firebase operation timed out');
    }
  }
}